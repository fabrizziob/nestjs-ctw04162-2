name: Final CICD Pipeline

on:
  push:
    branches:
      - main

jobs:
  os_matrix:
    name: Application Setup
    strategy:
      matrix:
        os: [ubuntu-latest]
        version: [18, 20]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Setup Node.Js Env
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.version }}
          cache: 'npm'  # NPM Caching for faster dependency installs.
    
    # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows#example-using-the-cache-action
      # - name: Cache node modules
      #   id: cache-npm
      #   uses: actions/cache@v4
      #   env:
      #       cache-name: cache-node-modules
      #   with:
      #       # npm cache files are stored in `~/.npm` on Linux/macOS
      #       path: ~/.npm
      #       key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      #       restore-keys: |
      #           ${{ runner.os }}-build-${{ env.cache-name }}-
      #           ${{ runner.os }}-build-
      #           ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Perform a clean install of dependencies
        run: npm ci
        
      - name: Build
        run: npm run build

      - name: Test
        run: npm test
      
      - name: Lint
        run: npm run lint

      - name: Audit
        run: npm audit
      
      - name: Archive production artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          name: Build-${{ matrix.os }}-dist-${{ github.ref_name }}-${{ matrix.version }}
          path: dist
          retention-days: 3
      
      # - name: Download production artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: Build-${{ matrix.os }}-dist-${{ github.ref_name }}-${{ matrix.version }}
      #     path: build
  
  deploy_ghpage:
    name: Deploy GH Pages
    runs-on: ubuntu-latest
    needs: os_matrix

    strategy:
      matrix:
        os: [ubuntu-latest]
        version: [18, 20]

    permissions:
      pages: write
      id-token: write

    environment:
      # environment created automatically by GitHub
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v3
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with: 
          artifact_name: Build-${{ matrix.os }}-dist-${{ github.ref_name }}-${{ matrix.version }}

      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'The project {{ EVENT_PAYLOAD.repository.full_name }} has been deployed.'

  discord_notification:
    name: Discord Notification
    runs-on: ubuntu-latest
    needs: deploy_ghpage

    steps:
      - name: Test Success
        uses: rjstone/discord-webhook-notify@v1
        if: success()
        with:
          severity: info
          details: Deployment of GH Page was successful.
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}